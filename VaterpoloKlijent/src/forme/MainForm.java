/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forme;

import formeTurnir.FormPretragaTurnira;
import formeVaterpolista.FormNoviVaterpolista;
import formeVaterpolista.FormPretragaVaterpoliste;
import controller.ClientController;
import domain.Administrator;
import domain.Grad;
import domain.Tabela;
import domain.Tim;
import domain.Turnir;
import domain.Utakmica;
import formeTim.FormNoviTim;
import formeTim.FormPretragaTimova;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import modeli.TableModelUcesnici;
import session.Session;

/**
 *
 * @author stefan
 */
public class MainForm extends javax.swing.JFrame {

    Administrator ulogovani;
    Tim prazan;
    Locale jezik;

    /**
     * Creates new form MainForm
     */
    public MainForm(Locale jezik) {
        initComponents();
        setLocationRelativeTo(null);
        this.ulogovani = Session.getInstance().getUlogovani();
        this.jezik = jezik;
        namestiJezik();
        popuniGradove();
        popuniTimove();
        btnEvidentiraj.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblUlogovani = new javax.swing.JLabel();
        pnlTurnir = new javax.swing.JPanel();
        lblGrad = new javax.swing.JLabel();
        lblNaziv = new javax.swing.JLabel();
        lblDP = new javax.swing.JLabel();
        lblDK = new javax.swing.JLabel();
        txtNaziv = new javax.swing.JTextField();
        cmbGrad = new javax.swing.JComboBox();
        txtDatumPocetka = new javax.swing.JFormattedTextField();
        txtDatumKraja = new javax.swing.JFormattedTextField();
        pnlUcesnik = new javax.swing.JPanel();
        lblTimovi = new javax.swing.JLabel();
        cmbTim = new javax.swing.JComboBox();
        btnDodaj = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTimovi = new javax.swing.JTable();
        btnMoveUp = new javax.swing.JButton();
        btnMoveDown = new javax.swing.JButton();
        btnMoveToTop = new javax.swing.JButton();
        btnMoveToBottom = new javax.swing.JButton();
        btnEvidentiraj = new javax.swing.JButton();
        cbZreb = new javax.swing.JCheckBox();
        cmbTip = new javax.swing.JComboBox<>();
        lblTip = new javax.swing.JLabel();
        btnSrpski = new javax.swing.JButton();
        btnEngleski = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mTurnir = new javax.swing.JMenu();
        miPretragaTurnira = new javax.swing.JMenuItem();
        mVaterpolista = new javax.swing.JMenu();
        miNoviVaterpolista = new javax.swing.JMenuItem();
        miPretragaVaterpoliste = new javax.swing.JMenuItem();
        mTim = new javax.swing.JMenu();
        miNoviTim = new javax.swing.JMenuItem();
        miPretragaTimova = new javax.swing.JMenuItem();
        mOdjava = new javax.swing.JMenu();
        miOdjava = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblUlogovani.setText("Ulogovani");

        pnlTurnir.setBorder(javax.swing.BorderFactory.createTitledBorder("Title"));

        lblGrad.setText("Grad:");

        lblNaziv.setText("Naziv:");

        lblDP.setText("Datum pocetka:");

        lblDK.setText("Datum kraja:");

        txtNaziv.setText("Turnir");

        cmbGrad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtDatumPocetka.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd.MM.yyyy"))));
        txtDatumPocetka.setText("10.08.2023");

        txtDatumKraja.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd.MM.yyyy"))));
        txtDatumKraja.setText("20.08.2023");

        pnlUcesnik.setBorder(javax.swing.BorderFactory.createTitledBorder("Title"));

        lblTimovi.setText("Timovi:");

        cmbTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTimActionPerformed(evt);
            }
        });

        btnDodaj.setText("Dodaj tim");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obrisi tim");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        tblTimovi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblTimovi);

        btnMoveUp.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnMoveUp.setText("↑");
        btnMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveUpActionPerformed(evt);
            }
        });

        btnMoveDown.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnMoveDown.setText("↓");
        btnMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveDownActionPerformed(evt);
            }
        });

        btnMoveToTop.setText("⇑");
        btnMoveToTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveToTopActionPerformed(evt);
            }
        });

        btnMoveToBottom.setText("⇓");
        btnMoveToBottom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveToBottomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlUcesnikLayout = new javax.swing.GroupLayout(pnlUcesnik);
        pnlUcesnik.setLayout(pnlUcesnikLayout);
        pnlUcesnikLayout.setHorizontalGroup(
            pnlUcesnikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUcesnikLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlUcesnikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlUcesnikLayout.createSequentialGroup()
                        .addComponent(btnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlUcesnikLayout.createSequentialGroup()
                        .addComponent(lblTimovi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbTim, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlUcesnikLayout.createSequentialGroup()
                        .addGap(0, 6, Short.MAX_VALUE)
                        .addGroup(pnlUcesnikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMoveToTop, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnMoveUp, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnMoveDown, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnMoveToBottom, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlUcesnikLayout.setVerticalGroup(
            pnlUcesnikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUcesnikLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlUcesnikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTimovi)
                    .addComponent(cmbTim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlUcesnikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDodaj)
                    .addComponent(btnObrisi))
                .addGap(18, 18, 18)
                .addGroup(pnlUcesnikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlUcesnikLayout.createSequentialGroup()
                        .addComponent(btnMoveToTop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMoveUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMoveDown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMoveToBottom))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnEvidentiraj.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btnEvidentiraj.setText("Evidentiraj turnir");
        btnEvidentiraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEvidentirajActionPerformed(evt);
            }
        });

        cbZreb.setText("Generisi zreb");

        cmbTip.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kup", "Liga" }));

        lblTip.setText("Tip turnira");

        javax.swing.GroupLayout pnlTurnirLayout = new javax.swing.GroupLayout(pnlTurnir);
        pnlTurnir.setLayout(pnlTurnirLayout);
        pnlTurnirLayout.setHorizontalGroup(
            pnlTurnirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTurnirLayout.createSequentialGroup()
                .addGroup(pnlTurnirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTurnirLayout.createSequentialGroup()
                        .addGroup(pnlTurnirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlTurnirLayout.createSequentialGroup()
                                .addGap(250, 250, 250)
                                .addComponent(btnEvidentiraj, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlTurnirLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pnlUcesnik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTurnirLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlTurnirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblNaziv)
                            .addComponent(lblGrad)
                            .addComponent(lblDP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDK)
                            .addComponent(lblTip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlTurnirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDatumPocetka, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
                            .addComponent(cmbGrad, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNaziv, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtDatumKraja)
                            .addComponent(cbZreb, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTip, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        pnlTurnirLayout.setVerticalGroup(
            pnlTurnirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTurnirLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTurnirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNaziv)
                    .addComponent(txtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTurnirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGrad)
                    .addComponent(cmbGrad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTurnirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDP)
                    .addComponent(txtDatumPocetka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTurnirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDatumKraja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDK))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTurnirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTip))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(cbZreb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlUcesnik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEvidentiraj, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnSrpski.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/rs.png"))); // NOI18N
        btnSrpski.setFocusable(false);
        btnSrpski.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSrpskiActionPerformed(evt);
            }
        });

        btnEngleski.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/en.png"))); // NOI18N
        btnEngleski.setFocusable(false);
        btnEngleski.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEngleskiActionPerformed(evt);
            }
        });

        mTurnir.setText("Turnir");

        miPretragaTurnira.setText("Pretraga turnira");
        miPretragaTurnira.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPretragaTurniraActionPerformed(evt);
            }
        });
        mTurnir.add(miPretragaTurnira);

        jMenuBar1.add(mTurnir);

        mVaterpolista.setText("Vaterpolista");

        miNoviVaterpolista.setText("Novi vaterpolista");
        miNoviVaterpolista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNoviVaterpolistaActionPerformed(evt);
            }
        });
        mVaterpolista.add(miNoviVaterpolista);

        miPretragaVaterpoliste.setText("Pretraga vaterpoliste");
        miPretragaVaterpoliste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPretragaVaterpolisteActionPerformed(evt);
            }
        });
        mVaterpolista.add(miPretragaVaterpoliste);

        jMenuBar1.add(mVaterpolista);

        mTim.setText("Tim");

        miNoviTim.setText("Novi tim");
        miNoviTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNoviTimActionPerformed(evt);
            }
        });
        mTim.add(miNoviTim);

        miPretragaTimova.setText("Pretraga timova");
        miPretragaTimova.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPretragaTimovaActionPerformed(evt);
            }
        });
        mTim.add(miPretragaTimova);

        jMenuBar1.add(mTim);

        mOdjava.setText("Odjava");

        miOdjava.setText("Odjavi se");
        miOdjava.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOdjavaActionPerformed(evt);
            }
        });
        mOdjava.add(miOdjava);

        jMenuBar1.add(mOdjava);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlTurnir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblUlogovani)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSrpski, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEngleski, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblUlogovani)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnEngleski)
                        .addComponent(btnSrpski)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTurnir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miNoviVaterpolistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNoviVaterpolistaActionPerformed
        new FormNoviVaterpolista(this, true, jezik).setVisible(true);
    }//GEN-LAST:event_miNoviVaterpolistaActionPerformed

    private void miPretragaVaterpolisteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPretragaVaterpolisteActionPerformed
        new FormPretragaVaterpoliste(this, true, jezik).setVisible(true);
    }//GEN-LAST:event_miPretragaVaterpolisteActionPerformed

    private void miPretragaTurniraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPretragaTurniraActionPerformed
        new FormPretragaTurnira(this, true, jezik).setVisible(true);
    }//GEN-LAST:event_miPretragaTurniraActionPerformed

    private void miOdjavaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOdjavaActionPerformed

        int result = JOptionPane.showConfirmDialog(this,
                ResourceBundle.getBundle("resource/messages").getString("odjava_msg"),
                ResourceBundle.getBundle("resource/messages").getString("konfirmacija"),
                JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.NO_OPTION) {
            return;
        }

        if (result == JOptionPane.YES_OPTION) {
            new LoginForma(jezik).setVisible(true);
            Session.getInstance().setUlogovani(null);
            this.dispose();
        }

    }//GEN-LAST:event_miOdjavaActionPerformed

    private void btnEvidentirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEvidentirajActionPerformed

        switch (cmbTip.getSelectedItem().toString()) {
            case "Kup":
                kreirajKup();
                break;
            case "Liga":
                kreirajLigu();
                break;
            default:
                JOptionPane.showMessageDialog(this, "Nije podrzan tip turnira.");
        }

    }//GEN-LAST:event_btnEvidentirajActionPerformed

    private void miNoviTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNoviTimActionPerformed
        new FormNoviTim(this, true, jezik).setVisible(true);
    }//GEN-LAST:event_miNoviTimActionPerformed

    private void miPretragaTimovaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPretragaTimovaActionPerformed
        new FormPretragaTimova(this, true, jezik).setVisible(true);
    }//GEN-LAST:event_miPretragaTimovaActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed

        int row = tblTimovi.getSelectedRow();

        if (row >= 0) {
            TableModelUcesnici tm = (TableModelUcesnici) tblTimovi.getModel();
            cmbTim.addItem(tm.obrisiTim(row));
            cmbTim.setEnabled(true);
            btnDodaj.setEnabled(true);

            if (tm.getLista().isEmpty()) {
                btnEvidentiraj.setEnabled(false);
            }
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed

        Tim t = (Tim) cmbTim.getSelectedItem();
        TableModelUcesnici tm = (TableModelUcesnici) tblTimovi.getModel();

        tm.dodajTim(t);
        cmbTim.removeItem(cmbTim.getSelectedItem());
        if (cmbTim.getModel().getSize() == 0) {
            cmbTim.setEnabled(false);
            btnDodaj.setEnabled(false);
        }
        btnEvidentiraj.setEnabled(true);
    }//GEN-LAST:event_btnDodajActionPerformed

    private void cmbTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTimActionPerformed

    }//GEN-LAST:event_cmbTimActionPerformed

    private void btnSrpskiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSrpskiActionPerformed
        try {
            jezik = new Locale.Builder().setLanguage("sr").setRegion("RS").build();
            Locale.setDefault(jezik);
            ArrayList<Tim> lista = ((TableModelUcesnici) tblTimovi.getModel()).getLista();
            namestiJezik();
            ((TableModelUcesnici) tblTimovi.getModel()).setLista(lista);
        } catch (Exception ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSrpskiActionPerformed

    private void btnEngleskiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEngleskiActionPerformed
        try {
            jezik = new Locale.Builder().setLanguage("en").setRegion("US").build();
            Locale.setDefault(jezik);
            ArrayList<Tim> lista = ((TableModelUcesnici) tblTimovi.getModel()).getLista();
            namestiJezik();
            ((TableModelUcesnici) tblTimovi.getModel()).setLista(lista);
        } catch (Exception ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEngleskiActionPerformed

    private void btnMoveToTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveToTopActionPerformed
        int row = tblTimovi.getSelectedRow();
        TableModelUcesnici tm = (TableModelUcesnici) tblTimovi.getModel();

        if (row > 0) {
            Tim t = tm.vratiTim(row);
            tm.obrisiTim(row);
            tm.dodajNaPoziciju(t, 0);
            tblTimovi.changeSelection(0, tblTimovi.getSelectedColumn(), false, false);
        }
    }//GEN-LAST:event_btnMoveToTopActionPerformed

    private void btnMoveToBottomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveToBottomActionPerformed
        int row = tblTimovi.getSelectedRow();
        TableModelUcesnici tm = (TableModelUcesnici) tblTimovi.getModel();

        if (row >= 0) {
            Tim t = tm.vratiTim(row);
            tm.obrisiTim(row);
            tm.dodajNaPoziciju(t, tm.getLista().size());
            tblTimovi.changeSelection(tm.getLista().size() - 1, tblTimovi.getSelectedColumn(), false, false);
        }
    }//GEN-LAST:event_btnMoveToBottomActionPerformed

    private void btnMoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveUpActionPerformed
        int row = tblTimovi.getSelectedRow();
        TableModelUcesnici tm = (TableModelUcesnici) tblTimovi.getModel();

        if (row > 0) {
            Tim t = tm.vratiTim(row);
            tm.obrisiTim(row);
            tm.dodajNaPoziciju(t, row - 1);
            tblTimovi.changeSelection(row - 1, tblTimovi.getSelectedColumn(), false, false);
        }
    }//GEN-LAST:event_btnMoveUpActionPerformed

    private void btnMoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveDownActionPerformed
        int row = tblTimovi.getSelectedRow();
        TableModelUcesnici tm = (TableModelUcesnici) tblTimovi.getModel();

        if (row >= 0 && row < tm.getLista().size() - 1) {
            Tim t = tm.vratiTim(row);
            tm.obrisiTim(row);
            tm.dodajNaPoziciju(t, row + 1);
            tblTimovi.changeSelection(row + 1, tblTimovi.getSelectedColumn(), false, false);
        }
    }//GEN-LAST:event_btnMoveDownActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnEngleski;
    private javax.swing.JButton btnEvidentiraj;
    private javax.swing.JButton btnMoveDown;
    private javax.swing.JButton btnMoveToBottom;
    private javax.swing.JButton btnMoveToTop;
    private javax.swing.JButton btnMoveUp;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnSrpski;
    private javax.swing.JCheckBox cbZreb;
    private javax.swing.JComboBox cmbGrad;
    private javax.swing.JComboBox cmbTim;
    private javax.swing.JComboBox<String> cmbTip;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDK;
    private javax.swing.JLabel lblDP;
    private javax.swing.JLabel lblGrad;
    private javax.swing.JLabel lblNaziv;
    private javax.swing.JLabel lblTimovi;
    private javax.swing.JLabel lblTip;
    private javax.swing.JLabel lblUlogovani;
    private javax.swing.JMenu mOdjava;
    private javax.swing.JMenu mTim;
    private javax.swing.JMenu mTurnir;
    private javax.swing.JMenu mVaterpolista;
    private javax.swing.JMenuItem miNoviTim;
    private javax.swing.JMenuItem miNoviVaterpolista;
    private javax.swing.JMenuItem miOdjava;
    private javax.swing.JMenuItem miPretragaTimova;
    private javax.swing.JMenuItem miPretragaTurnira;
    private javax.swing.JMenuItem miPretragaVaterpoliste;
    private javax.swing.JPanel pnlTurnir;
    private javax.swing.JPanel pnlUcesnik;
    private javax.swing.JTable tblTimovi;
    private javax.swing.JFormattedTextField txtDatumKraja;
    private javax.swing.JFormattedTextField txtDatumPocetka;
    private javax.swing.JTextField txtNaziv;
    // End of variables declaration//GEN-END:variables

    private void kreirajKup() {
        try {
            if (txtDatumKraja.getText().isEmpty() || txtDatumPocetka.getText().isEmpty() || txtNaziv.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        ResourceBundle.getBundle("resource/messages").getString("polja_msg"));
                return;
            }

            String opis = "";
            ArrayList<Utakmica> utakmice = new ArrayList<>();

            String naziv = txtNaziv.getText();
            Grad grad = (Grad) cmbGrad.getSelectedItem();

            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
            Date datumPocetka = sdf.parse(txtDatumPocetka.getText());
            Date datumKraja = sdf.parse(txtDatumKraja.getText());

            if (!datumPocetka.before(datumKraja)) {
                JOptionPane.showMessageDialog(this,
                        ResourceBundle.getBundle("resource.messages").getString("dpdk"));
                return;
            }

            TableModelUcesnici tm = (TableModelUcesnici) tblTimovi.getModel();
            ArrayList<Tim> ucesnici = tm.getLista();

            ArrayList<Tim> pobednici;

            if (cbZreb.isSelected()) {
                Collections.shuffle(ucesnici);
            }

            if (isPowerOfTwo(ucesnici.size())) {
                opis = "N/A  ";
            }

            while (!isPowerOfTwo(ucesnici.size())) {
                ucesnici.add(prazan);
            }

            int brojKola = (int) Math.ceil(Math.log(ucesnici.size()) / Math.log(2));
            String kolo;

            for (int runda = 1; runda <= brojKola; runda++) {

                int brojac = 0;
                pobednici = new ArrayList<>();

                if (runda == brojKola) {
                    kolo = "Finale";
                } else {
                    kolo = Integer.toString(runda);
                }

                for (int i = 0; i < ucesnici.size() / 2; i++) {

                    Tim tim1 = ucesnici.get(i);
                    Tim tim2 = ucesnici.get(ucesnici.size() - i - 1);
                    Utakmica u = new Utakmica(null, ++brojac, kolo, null, null,
                            tim1, tim2, prazan, null, null);

                    if (tim2.equals(prazan) && runda == 1) {
                        u.setPobednik(tim1);
                        opis += u.getPobednik().getNazivTima() + ", ";
                    }

                    if (runda != 1 && (tim2.equals(prazan) || tim1.equals(prazan))) {
                        u.setPobednik(prazan);
                    }

                    pobednici.add(u.getPobednik());
                    utakmice.add(u);

                }

                ucesnici = new ArrayList<>(pobednici);

            }

            for (int i = 1; i < brojKola - 1; i++) {
                sortiraj(utakmice, i);
            }

            if (opis.length() > 2) {
                opis = opis.substring(0, opis.length() - 2);
            }
            Turnir turnir = new Turnir(null, naziv, datumPocetka, datumKraja,
                    opis, "", grad, ulogovani, utakmice, null);

            ClientController.getInstance().addTurnir(turnir);
            resetujFormu();

            JOptionPane.showMessageDialog(this,
                    ResourceBundle.getBundle("resource/messages").getString("kreiran_turnir_msg"));

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ResourceBundle.getBundle("resource.messages").getString(ex.getMessage()));
            izbaciPrazne();
        }
    }

    private void kreirajLigu() {
        try {
            TableModelUcesnici tm = (TableModelUcesnici) tblTimovi.getModel();
            ArrayList<Tim> timovi = tm.getLista();
            int brojEkipa = timovi.size();
            int brojKola = brojEkipa % 2 == 0 ? brojEkipa - 1 : brojEkipa;

            if (brojEkipa % 2 != 0) {
                timovi.add(prazan);
                brojEkipa++;
            }
            ArrayList<Utakmica> sveUtakmice = new ArrayList<>();
            ArrayList<Utakmica> utakmiceKola;

            for (int i = 0; i < brojKola; i++) {
                utakmiceKola = new ArrayList<>();
                for (int j = 0; j < timovi.size() / 2; j++) {
                    if (timovi.get(j).equals(prazan) || timovi.get(brojEkipa - 1 - j).equals(prazan)) {
                        continue;
                    }
                    Utakmica u = new Utakmica(null, 0, Integer.toString(i + 1), null, null, timovi.get(j), timovi.get(brojEkipa - 1 - j), prazan, null, null);
                    if (i % 2 == 0 && j == 0) {
                        zameniTimove(u);
                    }
                    utakmiceKola.add(u);
                }
                Collections.shuffle(utakmiceKola);
                int brojac = 0;
                for (Utakmica utakmica : utakmiceKola) {
                    utakmica.setRbUtakmice(++brojac);
                    sveUtakmice.add(utakmica);
                }
                timovi.add(1, timovi.remove(brojEkipa - 1));
            }

            timovi.remove(prazan);

            if (cbZreb.isSelected()) {
                int brojUtakmica = sveUtakmice.size();
                for (int i = 0; i < brojUtakmica; i++) {
                    Utakmica u = new Utakmica(sveUtakmice.get(i));
                    zameniTimove(u);
                    u.setKolo(Integer.toString(brojKola + Integer.parseInt(u.getKolo())));
                    sveUtakmice.add(u);
                }
            }

            String opis = "";

            String naziv = txtNaziv.getText();
            Grad grad = (Grad) cmbGrad.getSelectedItem();

            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
            Date datumPocetka = sdf.parse(txtDatumPocetka.getText());
            Date datumKraja = sdf.parse(txtDatumKraja.getText());

            ArrayList<Tabela> tabele = new ArrayList<>();

            for (Tim t : timovi) {
                Tabela tabela = new Tabela(null, t, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                tabele.add(tabela);
            }

            Turnir t = new Turnir(null, naziv, datumPocetka, datumKraja, opis, "", grad, ulogovani, sveUtakmice, tabele);

            ClientController.getInstance().addTurnir(t);
            resetujFormu();

            JOptionPane.showMessageDialog(this,
                    ResourceBundle.getBundle("resource/messages").getString("kreiran_turnir_msg"));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ResourceBundle.getBundle("resource.messages").getString(ex.getMessage()));
        }
    }

    private void popuniGradove() {
        try {
            ArrayList<Grad> gradovi = ClientController.getInstance().getAllGrad();

            cmbGrad.removeAllItems();

            for (Grad grad : gradovi) {
                cmbGrad.addItem(grad);
            }

        } catch (Exception ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void popuniTimove() {
        try {
            ArrayList<Tim> timovi = ClientController.getInstance().getAllTim();

            cmbTim.removeAllItems();

            for (Tim tim : timovi) {
                cmbTim.addItem(tim);
            }
            prazan = (Tim) cmbTim.getItemAt(0);
            cmbTim.removeItemAt(0);
        } catch (Exception ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void resetujFormu() {
        popuniTimove();
        TableModelUcesnici tm = (TableModelUcesnici) tblTimovi.getModel();
        tm.getLista().clear();
        tm.fireTableDataChanged();
        btnEvidentiraj.setEnabled(false);
    }

    private boolean isPowerOfTwo(int n) {
        return (n & (n - 1)) == 0;
    }

    private void sortiraj(ArrayList<Utakmica> utakmice, int KOLO) {

        String kolo = Integer.toString(KOLO);
        ArrayList<Utakmica> utakmiceSort = new ArrayList<>();
        for (Utakmica utakmica : utakmice) {
            if (utakmica.getKolo().equals(kolo)) {
                utakmiceSort.add(utakmica);
            }
        }

        int inkrement = 1;

        int brojKola = (int) Math.ceil(Math.log(utakmiceSort.size()) / Math.log(2));
        int brojKolaPom = brojKola;

        int max = utakmiceSort.size() - 1;
        for (int i = 1; i < brojKola; i++) {
            ArrayList<Utakmica> pomocna = new ArrayList<>();

            for (int j = 0; j < Math.pow(2, brojKolaPom - 1); j += inkrement) {

                for (int k = 1; k <= Math.pow(2, i - 1); k++) {
                    pomocna.add(utakmiceSort.get(j + k - 1));
                }

                for (int k = (int) Math.pow(2, i - 1); k >= 1; k--) {
                    pomocna.add(utakmiceSort.get(max - j - k + 1));
                }

            }

            inkrement *= 2;

            utakmiceSort = new ArrayList<>(pomocna);
        }

        int brojac = 0;
        for (Utakmica utak : utakmiceSort) {
            utak.setRbUtakmice(++brojac);
        }
    }

    private void namestiJezik() {
        ResourceBundle bundle = ResourceBundle.getBundle("resource/messages");

        setTitle(bundle.getString("main_forma"));
        lblUlogovani.setText(bundle.getString("ulogovani") + ulogovani);

        mOdjava.setText(bundle.getString("odjava"));
        mTim.setText(bundle.getString("tim"));
        mTurnir.setText(bundle.getString("turnir"));
        mVaterpolista.setText(bundle.getString("vaterpolista"));

        miNoviTim.setText(bundle.getString("novi_tim"));
        miNoviVaterpolista.setText(bundle.getString("novi_vtp"));
        miOdjava.setText(bundle.getString("odjava"));
        miPretragaTimova.setText(bundle.getString("pretraga_timova"));
        miPretragaTurnira.setText(bundle.getString("pretraga_turnir"));
        miPretragaVaterpoliste.setText(bundle.getString("pretraga_vtp"));

        pnlTurnir.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("unos_turnir")));
        pnlUcesnik.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("unos_ucesnik")));

        lblDK.setText(bundle.getString("datum_kraja"));
        lblDP.setText(bundle.getString("datum_pocetka"));
        lblGrad.setText(bundle.getString("grad"));
        lblNaziv.setText(bundle.getString("naziv"));
        lblTimovi.setText(bundle.getString("timovi"));
        lblTip.setText(bundle.getString("tip_turnira"));

        cbZreb.setText(bundle.getString("generisi"));

        btnDodaj.setText(bundle.getString("dodaj_tim"));
        btnObrisi.setText(bundle.getString("obrisi_tim"));
        btnEvidentiraj.setText(bundle.getString("evidentiraj_turnir"));

        String[] kolone = {"ID:", bundle.getString("naziv"), bundle.getString("grad")};

        TableModelUcesnici tm = new TableModelUcesnici();
        tm.setKolone(kolone);
        tblTimovi.setModel(tm);

    }

    private void izbaciPrazne() {
        TableModelUcesnici tm = (TableModelUcesnici) tblTimovi.getModel();
        ArrayList<Tim> ucesnici = tm.getLista();
        while (ucesnici.remove(prazan)) {
        }
        tm.fireTableDataChanged();
    }

    private void zameniTimove(Utakmica u) {
        Tim t = u.getPrviTim();
        u.setPrviTim(u.getDrugiTim());
        u.setDrugiTim(t);
    }

}
